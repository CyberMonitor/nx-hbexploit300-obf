import ScrambledConstant
import Variable
import struct

class ScrambledString:
    def __init__(self, value, max_len=None, binary=False):
        self.value = value
        self.max_len = max_len
        if binary:
            self.var_name = Variable.alloc_name('bin')
        else:
            self.var_name = Variable.alloc_name('str')
        self.binary = binary

    def generate(self):
        value = self.value

        value += '\0'
        value += '\0' * ((4-len(value)) % 4)

        buf_size = self.max_len
        if buf_size is None:
            buf_size = len(value)

        if self.binary:
            ret = '// Encoding binary\n'
        else:
            ret = '// Encoding string "%s"\n' % self.value

        ret += 'char %s[%d];\n' % (self.var_name, buf_size)

        for i in range(len(value)/4):
            part = value[4*i : 4*i+4]
            part = struct.unpack('<I', part)[0]

            const = ScrambledConstant.ScrambledConstant(part)
            ret += const.generate_scramble()

            ret += '*(u32*)(&%s[4*%d]) = %s;\n' % (self.var_name, i, const.get_var_name())

        return ret

    def get_var_name(self):
        return self.var_name
