import Random
import Variable

class SecretGenerator:
    def __init__(self):
        self.var_name = Variable.alloc_name()
        self.secret = None
    def get_var_name(self):
        return self.var_name
    def get_result(self):
        return self.secret

class RandomNumberSecretGenerator(SecretGenerator):
    def __init__(self):
        SecretGenerator.__init__(self)
        self.secret = Random.get_u32()
    def generate_code(self):
        return 'u32 {0} = 0x{1:08x};\n'.format(self.var_name, self.secret)

CORE_ID = 1

KERNEL_RETVALS_300 = {
    0xFFFFFFF7FFC01840: lambda x0: 0,
    0xFFFFFFF7FFC05018: lambda x0: (x0&0xFFFF0000) | 0xB340, # movk x0, 0xb340; ret. Instruction only modified lower 16-bits
    0xFFFFFFF7FFC05018: lambda x0: (x0&0xFFFF0000) | 0xB340,
    0xFFFFFFF7FFC05D1C: lambda x0: (x0&0xFFFF0000) | 0xB3A0,
    0xFFFFFFF7FFC05D1C: lambda x0: (x0&0xFFFF0000) | 0xB3A0,
    0xFFFFFFF7FFC05FDC: lambda x0: (x0&0xFFFF0000) | 0xB428,
    0xFFFFFFF7FFC05FDC: lambda x0: (x0&0xFFFF0000) | 0xB428,
    0xFFFFFFF7FFC05FF4: lambda x0: 1,
    0xFFFFFFF7FFC06000: lambda x0: x0,                       # ret
    0xFFFFFFF7FFC06814: lambda x0: (x0&0xFFFF0000) | 0xB4E8,
    0xFFFFFFF7FFC06814: lambda x0: (x0&0xFFFF0000) | 0xB4E8,
    0xFFFFFFF7FFC08574: lambda x0: 0,
    0xFFFFFFF7FFC09698: lambda x0: (x0&0xFFFF0000) | 0xB720,
    0xFFFFFFF7FFC09698: lambda x0: (x0&0xFFFF0000) | 0xB720,
    0xFFFFFFF7FFC097F0: lambda x0: (x0&0xFFFF0000) | 0xB788,
    0xFFFFFFF7FFC097F0: lambda x0: (x0&0xFFFF0000) | 0xB788,
    0xFFFFFFF7FFC098C4: lambda x0: (x0&0xFFFF0000) | 0xB828,
    0xFFFFFFF7FFC098C4: lambda x0: (x0&0xFFFF0000) | 0xB828,
    0xFFFFFFF7FFC098DC: lambda x0: 1,
    0xFFFFFFF7FFC0A69C: lambda x0: (x0&0xFFFF0000) | 0xB898,
    0xFFFFFFF7FFC0A69C: lambda x0: (x0&0xFFFF0000) | 0xB898,
    0xFFFFFFF7FFC0B724: lambda x0: 1,
    0xFFFFFFF7FFC0BF78: lambda x0: 1,
    0xFFFFFFF7FFC0C1C8: lambda x0: 0,
    0xFFFFFFF7FFC0C390: lambda x0: 1,
    0xFFFFFFF7FFC0C418: lambda x0: 1,
    0xFFFFFFF7FFC1B814: lambda x0: (x0&0xFFFF0000) | 0xB9D8,
    0xFFFFFFF7FFC1B814: lambda x0: (x0&0xFFFF0000) | 0xB9D8,
    0xFFFFFFF7FFC1E52C: lambda x0: (x0&0xFFFF0000) | 0xBA78,
    0xFFFFFFF7FFC1E52C: lambda x0: (x0&0xFFFF0000) | 0xBA78,
    0xFFFFFFF7FFC1EC90: lambda x0: (x0&0xFFFF0000) | 0xBB30,
    0xFFFFFFF7FFC1EC90: lambda x0: (x0&0xFFFF0000) | 0xBB30,
    0xFFFFFFF7FFC20A2C: lambda x0: 1,
    0xFFFFFFF7FFC20A34: lambda x0: 1,
    0xFFFFFFF7FFC20EC4: lambda x0: (x0&0xFFFF0000) | 0xBBD0,
    0xFFFFFFF7FFC20EC4: lambda x0: (x0&0xFFFF0000) | 0xBBD0,
    0xFFFFFFF7FFC20F14: lambda x0: 0,
    0xFFFFFFF7FFC2176C: lambda x0: x0,
    0xFFFFFFF7FFC24CCC: lambda x0: (x0&0xFFFF0000) | 0xBC58,
    0xFFFFFFF7FFC24CCC: lambda x0: (x0&0xFFFF0000) | 0xBC58,
    0xFFFFFFF7FFC24ECC: lambda x0: (x0&0xFFFF0000) | 0xBD20,
    0xFFFFFFF7FFC24ECC: lambda x0: (x0&0xFFFF0000) | 0xBD20,
    0xFFFFFFF7FFC24F44: lambda x0: x0,
    0xFFFFFFF7FFC25264: lambda x0: (x0&0xFFFF0000) | 0xBD90,
    0xFFFFFFF7FFC25264: lambda x0: (x0&0xFFFF0000) | 0xBD90,
    0xFFFFFFF7FFC25764: lambda x0: (x0&0xFFFF0000) | 0xBE00,
    0xFFFFFFF7FFC25764: lambda x0: (x0&0xFFFF0000) | 0xBE00,
    0xFFFFFFF7FFC25838: lambda x0: x0,
    0xFFFFFFF7FFC25908: lambda x0: x0,
    0xFFFFFFF7FFC26EA0: lambda x0: 0,
    0xFFFFFFF7FFC26EA8: lambda x0: 0,
    0xFFFFFFF7FFC27F08: lambda x0: (x0 + 0x70) & 0xFFFFFFFF,
    0xFFFFFFF7FFC27F40: lambda x0: (x0&0xFFFF0000) | 0xBF08,
    0xFFFFFFF7FFC27F40: lambda x0: (x0&0xFFFF0000) | 0xBF08,
    0xFFFFFFF7FFC29028: lambda x0: (x0&0xFFFF0000) | 0xC020,
    0xFFFFFFF7FFC29028: lambda x0: (x0&0xFFFF0000) | 0xC020,
    0xFFFFFFF7FFC29040: lambda x0: 1,
    0xFFFFFFF7FFC29280: lambda x0: (x0&0xFFFF0000) | 0xC098,
    0xFFFFFFF7FFC29280: lambda x0: (x0&0xFFFF0000) | 0xC098,
    0xFFFFFFF7FFC29368: lambda x0: (x0&0xFFFF0000) | 0xC108,
    0xFFFFFFF7FFC29368: lambda x0: (x0&0xFFFF0000) | 0xC108,
    0xFFFFFFF7FFC29380: lambda x0: 1,
    0xFFFFFFF7FFC29384: lambda x0: x0,
    #0xFFFFFFF7FFC2B3D4: lambda x0: 0, # should be fine
    0xFFFFFFF7FFC2F01C: lambda x0: x0,
    0xFFFFFFF7FFC2F834: lambda x0: x0,
    0xFFFFFFF7FFC2F998: lambda x0: x0,
    0xFFFFFFF7FFC2F9CC: lambda x0: x0,
    #0xFFFFFFF7FFC2F8DC: lambda x0: x0, # BAD
    0xFFFFFFF7FFC2FC10: lambda x0: x0,
    0xFFFFFFF7FFC3044C: lambda x0: x0,
    0xFFFFFFF7FFC30484: lambda x0: x0,
    0xFFFFFFF7FFC304EC: lambda x0: x0,
    0xFFFFFFF7FFC306FC: lambda x0: x0,
    0xFFFFFFF7FFC30C10: lambda x0: x0,
    0xFFFFFFF7FFC30C48: lambda x0: x0,
    #0xFFFFFFF7FFC33178: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33178: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33178: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33178: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33178: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33178: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33178: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33178: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33178: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33178: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33178: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33178: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33BB4: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33BB4: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33BB4: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33BB4: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33BB4: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33BB4: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33BB4: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33BB4: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33BB4: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33BB4: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33BB4: lambda x0: CORE_ID, # !!!CORE ID!!!
    #0xFFFFFFF7FFC33BB4: lambda x0: CORE_ID, # !!!CORE ID!!!
    0xFFFFFFF7FFC345D8: lambda x0: 0x1B,
    0xFFFFFFF7FFC345EC: lambda x0: 9,
    0xFFFFFFF7FFC34600: lambda x0: 9,
    0xFFFFFFF7FFC3934C: lambda x0: (x0+0x80) & 0xFFFFFFFF,   # add  x0, 0x80;   ret.
    0xFFFFFFF7FFC397D0: lambda x0: 1,
    0xFFFFFFF7FFC3984C: lambda x0: 1,
    0xFFFFFFF7FFC39884: lambda x0: 1,
    0xFFFFFFF7FFC398C0: lambda x0: 0,
    0xFFFFFFF7FFC398E8: lambda x0: 1,
    0xFFFFFFF7FFC39964: lambda x0: 1,
    0xFFFFFFF7FFC399D8: lambda x0: 0,
    0xFFFFFFF7FFC39A00: lambda x0: 1,
    0xFFFFFFF7FFC39A38: lambda x0: 1,
    0xFFFFFFF7FFC39A3C: lambda x0: x0,
    0xFFFFFFF7FFC39C4C: lambda x0: 1,
    0xFFFFFFF7FFC3B4F0: lambda x0: x0,
    0xFFFFFFF7FFC3CACC: lambda x0: (x0&0xFFFF0000) | 0xCCE8,
    0xFFFFFFF7FFC4157C: lambda x0: 5,
    0xFFFFFFF7FFC46B7C: lambda x0: 1,

}

class KernelFunctionRetvalSecretGenerator(SecretGenerator):
    def __init__(self):
        SecretGenerator.__init__(self)
    def generate_code(self):
        func = Random.from_dict(KERNEL_RETVALS_300)
        x0 = Random.get_u32()
        self.secret = KERNEL_RETVALS_300[func](x0)

        return 'u32 {0} = {1}; // Returns 0x{2:08x}\n'.format(self.var_name, '((u32(*)(u32))0x%xull)(0x%x)' % (func, x0), self.secret)


LIBNX_RETVALS = {
    'svcSetMemoryPermission(1, 0, 0)': 0xCC01,
    'svcSetMemoryPermission(0, 0, 0)': 0xCA01,
    'svcSetMemoryPermission(0, 0x1000, 8)': 0xD801,
    'svcSetMemoryPermission(0x1000, 0x1000, 3)': 0xD401,
    'svcUnmapTransferMemory(-1, 0x1000, 0x1000)': 0xE401,
    #'svcSetThreadCoreMask(0xFFFF8000, 0, 0)': 0xE801,
    #'svcSetThreadCoreMask(0xFFFF8000, 0, -1)': 0xE201,
    'svcConnectToNamedPort(&tmp_handle, NULL)': 0xE601,
    'svcConnectToNamedPort(&tmp_handle, "xxxxxxxxxxxxxx")': 0xEE01,
    'svcConnectToNamedPort(&tmp_handle, "banana")': 0xF201,
    'svcSetMemoryAttribute(1, 0, 0, 0)': 0xCC01,
    'svcSetMemoryAttribute(0, 0, 0, 0)': 0xCA01,
    'svcMapMemory(1, 0, 0)': 0xCC01,
    'svcMapMemory(0, 0, 0)': 0xCA01,
    'svcUnmapMemory(1, 0, 0)': 0xCC01,
    'svcUnmapMemory(0, 0, 0)': 0xCA01,
    'svcOutputDebugString("", 0)': 0,
}

class LibnxFunctionRetvalSecretGenerator(SecretGenerator):
    def __init__(self):
        SecretGenerator.__init__(self)
    def generate_code(self):
        func = Random.from_dict(LIBNX_RETVALS)
        self.secret = LIBNX_RETVALS[func]

        return 'u32 {0} = {1}; // Returns 0x{2:x}\n'.format(self.var_name, func, self.secret)


g_list = [
    RandomNumberSecretGenerator,
    RandomNumberSecretGenerator,
    RandomNumberSecretGenerator,
    RandomNumberSecretGenerator,
    RandomNumberSecretGenerator,
    RandomNumberSecretGenerator,
    RandomNumberSecretGenerator,
    LibnxFunctionRetvalSecretGenerator,
    LibnxFunctionRetvalSecretGenerator,
    KernelFunctionRetvalSecretGenerator,
    KernelFunctionRetvalSecretGenerator,
    KernelFunctionRetvalSecretGenerator,
    KernelFunctionRetvalSecretGenerator,
]

def get_N_random_secrets(num):
    secrets = []
    for i in range(num):
        SecretGeneratorType = g_list[Random.get_u32() % len(g_list)]
        secrets.append(SecretGeneratorType())
    return secrets
