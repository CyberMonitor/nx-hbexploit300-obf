
import Random
import Variable
import SecretGenerators
import Operators

DISABLE_SCRAMBLE=0
TEST=0

class ScrambledConstant:
    def __init__(self, constant):
        self.constant = constant
        self.var_name = Variable.alloc_name('c_0x%x' % self.constant)

    def generate_scramble(self):
        if DISABLE_SCRAMBLE:
            return 'u32 {0} = {1};\n'.format(self.var_name, self.constant)

        ret = ''

        ret += '// Scrambling constant %d (0x%x)\n' % (self.constant, self.constant)
        secrets = SecretGenerators.get_N_random_secrets(5 + Random.get_u32()%3)
        for s in secrets:
            ret += s.generate_code()

        ret += '// Beginning scramble\n'
        op = secrets[0]
        for i in range(1, len(secrets)):
            OpType = Operators.get_random_op()
            op = OpType(op, secrets[i])
            ret += op.generate_code()

        ret += '// Ending scramble\n'

        last_op_name = op.get_var_name()
        last_op_val  = op.get_result()

        ret += 'u32 {0} = {1} ^ 0x{2:08x};\n'.format(self.var_name, last_op_name, last_op_val ^ self.constant)

        ret += '// %s == %d\n' % (self.var_name, self.constant)

        if TEST:
            ret += 'if (%s != %d) fatalSimple(MAKERESULT(222, %d));\n' % (self.var_name, self.constant, Variable.alloc_err())

        ret += '\n'
        return ret

    def generate(self):
        return self.generate_scramble()

    def get_var_name(self):
        return self.var_name
