import Random
import Variable
import struct

def crc32(crc, p, len):
    for i in range(len):
        crc = crc ^ ord(p[i])
        for j in range(8):
            crc = (crc >> 1) ^ (0xedb88320 & -(crc & 1))
    return crc

def crc32c(crc, p, len):
    for i in range(len):
        crc = crc ^ ord(p[i])
        for j in range(8):
            crc = (crc >> 1) ^ (0x82F63B78 & -(crc & 1))
    return crc

class RawValue:
    def __init__(self, x):
        self.x = x
    def get_result(self):
        if type(self.x) == str:
            raise 0
        return self.x
    def get_var_name(self):
        if type(self.x) == int:
            raise 0
        return self.x

class Operator:
    def __init__(self, a, b):
        if type(a) in [int, str]:
            a = RawValue(a)
        if type(b) in [int, str]:
            b = RawValue(b)
        self.a = a
        self.b = b
        self.var_name = Variable.alloc_name()
    def get_var_name(self):
        return self.var_name

class AddOp(Operator):
    def generate_code(self):
        return 'u32 {0} = {1} + {2};\n'.format(self.var_name, self.a.get_var_name(), self.b.get_var_name())
    def get_result(self):
        return (self.a.get_result() + self.b.get_result()) & 0xFFFFFFFF

class SubOp(Operator):
    def generate_code(self):
        return 'u32 {0} = {1} - {2};\n'.format(self.var_name, self.a.get_var_name(), self.b.get_var_name())
    def get_result(self):
        return (self.a.get_result() - self.b.get_result() + (1 << 32)) & 0xFFFFFFFF

class XorOp(Operator):
    def generate_code(self):
        return 'u32 {0} = {1} ^ {2};\n'.format(self.var_name, self.a.get_var_name(), self.b.get_var_name())
    def get_result(self):
        return (self.a.get_result() ^ self.b.get_result()) & 0xFFFFFFFF

class Crc32Op(Operator):
    def generate_code(self):
        return 'u32 {0} = __crc32w({1}, {2});\n'.format(self.var_name, self.a.get_var_name(), self.b.get_var_name())
    def get_result(self):
        return crc32(self.a.get_result(), struct.pack('<I', self.b.get_result()), 4)

class Crc32COp(Operator):
    def generate_code(self):
        return 'u32 {0} = __crc32cw({1}, {2});\n'.format(self.var_name, self.a.get_var_name(), self.b.get_var_name())
    def get_result(self):
        return crc32c(self.a.get_result(), struct.pack('<I', self.b.get_result()), 4)

g_list = [
    AddOp,
    SubOp,
    XorOp,
    Crc32Op,
    Crc32COp,
]

def get_random_op():
    return g_list[Random.get_u32() % len(g_list)]
