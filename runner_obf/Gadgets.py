import struct
import random

class Gadget:
    def __init__(self, base, offset):
        self.base   = base
        self.offset = offset
        self.is_referenced = False

    def get_base(self):
        return self.base

    def get_offset(self):
        return self.offset

    def get_value(self):
        return struct.pack('<Q', self.offset)

    def generate_relocs(self, n):
        return []

class Imm(Gadget):
    def __init__(self, value):
        Gadget.__init__(self, None, value)

class DontCare(Gadget):
    def __init__(self):
        Gadget.__init__(self, None, None)

    def get_value(self):
        return struct.pack('<Q', 0) # todo

class ButtonPtrGadget(Gadget):
    def __init__(self):
        Gadget.__init__(self, '', 0)

    def generate_relocs(self, n):
        return [2, n*8]

class KernelGadget(Gadget):
    def __init__(self, offset):
        Gadget.__init__(self, None, 0xFFFFFFF7FFC00000+offset)

class RtldGadget(Gadget):
    def __init__(self, offset):
        Gadget.__init__(self, 'rtld', offset)

    def generate_relocs(self, n):
        return [1, n*8]

    def __add__(self, other):
        return RtldGadget(self.offset + other)

class MainGadget(RtldGadget):
    def __init__(self, offset):
        RtldGadget.__init__(self, offset+0x4000)

class SdkGadget(RtldGadget):
    def __init__(self, offset):
        RtldGadget.__init__(self, offset+0x9cb000)

class DataReference(Gadget):
    def __init__(self, data_idx):
        Gadget.__init__(self, 'scratch', None)
        self.data_idx = data_idx

    def get_value(self):
        return struct.pack('<Q', self.data_idx + self.data_off)

    def set_data_offset(self, data_off):
        self.data_off = data_off

    def generate_relocs(self, n):
        return [0, n*8]

class DataReferenceRelative:
    def __init__(self, rel):
        self.rel = rel

class RopGadget(Gadget):
    def __init__(self, data_idx):
        Gadget.__init__(self, 'scratch', None)
        self.data_idx = data_idx

    def get_value(self):
        return struct.pack('<Q', self.data_idx)

    def generate_relocs(self, n):
        return [0, n*8]

class RelativeReference:
    def __init__(self, rel):
        self.rel = rel

class ImmPlaceholder(Gadget):
    def __init__(self):
        Gadget.__init__(self, None, 0)

class Placeholder(Gadget):
    def __init__(self):
        Gadget.__init__(self, None, 0)

class PlaceholderReference:
    def __init__(self, placeholder, rel_off=0):
        self.placeholder = placeholder
        self.placeholder.is_referenced = True
        self.rel_off = rel_off

    def get_value(self):
        return struct.pack('<Q', self.placeholder_off + self.rel_off)

    def set_placeholder_offset(self, placeholder_off):
        self.placeholder_off = placeholder_off

    def generate_relocs(self, n):
        return [0, n*8]

