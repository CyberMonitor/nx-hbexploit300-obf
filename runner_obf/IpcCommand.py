import Sequences
import Gadgets
import ImmEncoder
import struct

class WriteImm4:
    def __init__(self, dst, imm):
        self.dst = dst
        self.imm = imm

    def generate(self, r):
        imm = ImmEncoder.get_imm_encoder(self.imm)

        ret = []
        ret += imm.generate(r)
        ret += [
            Sequences.LoadX8(Sequences.Write_W2_X0().get_addr()),
            Sequences.Load_X0X1X2X3(self.dst, Gadgets.DontCare(), imm.get_imm_placeholder()),
            Sequences.CallX8()
        ]

        return ret

IPC_PTR = Gadgets.RtldGadget(0x3000)

class Cmd:
    def __init__(self, handle_ptr, cmd_id, raw=[], cmd_type=4, x=None):
        self.cmd_id = cmd_id
        self.raw = raw
        self.cmd_type = cmd_type
        self.x = x
        self.handle_ptr = handle_ptr

    def generate(self, r):
        ret = []

        x_flag = 0
        if self.x is None:
            x_possibilities = [None]
            x_flag = 0
        else:
            x_possibilities = []
            x_flag = 1

            size = self.x[1]

            for bit32_35 in range(1 << (35-32+1)):
                for bit36_38 in range(1 << (39-36+1)):
                    x_possibilities += [(size << 16) | (bit32_35 << 12) | (bit36_38 << 6)]

        for x_desc in x_possibilities:
            off = 0

            # Write cmd hdr0
            ret += WriteImm4(IPC_PTR+off, self.cmd_type | (x_flag << 16)).generate(r)
            off += 4

            # Write cmd hdr1
            ret += WriteImm4(IPC_PTR+off, ((2*len(self.raw)) + 4 + 4)).generate(r)
            off += 4

            # Write X descriptor
            if not (x_desc is None):
                ret += WriteImm4(IPC_PTR+off, x_desc).generate(r)
                off += 4

                ret += [
                    Sequences.Load_X0X1X2X3(IPC_PTR+off, self.x[0], Gadgets.Imm(4)),
                    Sequences.Memcpy()
                ]
                off += 4

            off = (off + 15) &~ 15

            # Write SFCI magic
            ret += WriteImm4(IPC_PTR+off, 0x49434653).generate(r)
            off += 4
            ret += WriteImm4(IPC_PTR+off, 0).generate(r)
            off += 4

            # Write cmd id
            ret += WriteImm4(IPC_PTR+off, self.cmd_id).generate(r)
            off += 4
            ret += WriteImm4(IPC_PTR+off, 0).generate(r)
            off += 4

            # Write raw section
            for ra in self.raw:
                ret += WriteImm4(IPC_PTR+off, ra).generate(r)
                off += 4
                ret += WriteImm4(IPC_PTR+off, ra>>32).generate(r)
                off += 4

            # Setup handle for call
            handle = Gadgets.DontCare()
            handle_ref = Gadgets.PlaceholderReference(handle)

            ret += [
                Sequences.Load_X0X1X2X3(handle_ref, self.handle_ptr, Gadgets.Imm(4)),
                Sequences.Memcpy()
            ]

            # Call svcSendSyncRequestWithUserBuffer
            ret += [
                Sequences.LoadX8(Sequences.SendSyncRequestWithUserBuffer().get_addr()),
                Sequences.Load_X0X1X2X3(IPC_PTR, Gadgets.Imm(0x1000), handle),
                Sequences.CallX8(),
                #Sequences.CrashIfResultFailed()
            ]

        return ret
